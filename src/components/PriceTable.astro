---
import utils from "../utils";

const pricingPlans = [
  {
    title: "Starter",
    monthlyPrice: "0.99",
    annualPrice: "9.99", // 0.99 * 12 * 0.85 (15% discount)
    description:
      "Get started with essential features tailored for hobbyists and strong individual contributors.",
    features: [
      "1 Team member",
      "1 Project",
      "50 Feature Flags",
      "Percentage rollout",
      "Basic support",
      "Help center access",
    ],
  },
  {
    title: "Pro",
    monthlyPrice: "9.99",
    annualPrice: "99.99", // 9.99 * 12 * 0.85 (15% discount)
    description:
      "Begin with key designed specifically for small business and growing teams needs.",
    features: [
      "50 Team members",
      "50 Projects",
      "500 flags per project",
      "User targeting",
      "Percentage rollout",
      "Location-based targeting",
      "Priority email support",
      "Help center access",
    ],
  },
  {
    title: "Enterprise",
    monthlyPrice: "19.99",
    annualPrice: "199.99", // 19.99 * 12 * 0.85 (15% discount)
    description: "For larger teams with premium needs",
    features: [
      "Enterprise SSO",
      "Additional Data Connectors",
      "Dedicated Account Manager",
      "Custom SLAs",
      "Enterprise Support",
    ],
  },
];
---

<section>
  <div class="container">
    <div class="max-w-lg m-auto text-center">
      <h1 class="text-xlg">Flexible pricing</h1>
      <p class="text-sm m-auto max-w-md">Choose the best plan for your team</p>

      <div class="toggle-container flex justify-center align-center gap-2 mt-4">
        <span>Monthly</span>
        <label class="switch">
          <input type="checkbox" class="billing-toggle" checked />
          <span class="slider round"></span>
        </label>
        <span>Annual (15% off)</span>
      </div>
    </div>

    <div class="price-wrap gap-3">
      {
        pricingPlans.map((plan) => (
          <div class="price-item radius-md">
            <h3 class="text-md text-bold">{plan.title}</h3>
            <div class="item-cost flex align-center gap-1">
              <h1 class="text-lg monthly-price" style="display: none;">
                ${plan.monthlyPrice}
              </h1>
              <h1 class="text-lg annual-price">${plan.annualPrice}</h1>
              <p
                class="text-sm text-normal monthly-text"
                style="display: none;"
              >
                /per month
              </p>
              <p class="text-sm text-normal annual-text">/per year</p>
            </div>
            <p class="price-desc">{plan.description}</p>
            <ul class="price-feature">
              {plan.features.map((feature) => (
                <li class="price-feature-item flex align-center gap-1 mt-1">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="currentColor"
                    class="size-6"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12Zm13.36-1.814a.75.75 0 1 0-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 0 0-1.06 1.06l2.25 2.25a.75.75 0 0 0 1.14-.094l3.75-5.25Z"
                      clip-rule="evenodd"
                    />
                  </svg>
                  <span>{feature}</span>
                </li>
              ))}
            </ul>
            <a href={utils.free_link} target="_blank" class="button w-full">
              Get Started for Free
            </a>
          </div>
        ))
      }
    </div>
  </div>
</section>

<style>
  section {
    padding-top: 150px;
  }

  .price-wrap {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    padding-top: 50px;
  }
  .price-item {
    padding: var(--radius-lg);
    border: var(--border);
  }

  .price-feature {
    min-height: 230px;
  }

  svg {
    fill: var(--accent);
    width: 20px;
  }
  ul {
    list-style-type: none;
    padding: 0;
    margin: 50px 0 0 0;
  }

  /* Toggle switch styles */
  .switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
  }

  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: 0.4s;
  }

  .slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: 0.4s;
  }

  input:checked + .slider {
    background-color: var(--accent);
  }

  input:checked + .slider:before {
    transform: translateX(26px);
  }

  .slider.round {
    border-radius: 34px;
  }

  .slider.round:before {
    border-radius: 50%;
  }

  @media (max-width: 700px) {
    .price-wrap {
      grid-template-columns: 100%;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const toggles =
      document.querySelectorAll<HTMLInputElement>(".billing-toggle");

    updateAllPricingDisplays(true);

    toggles.forEach((toggle) => {
      toggle.addEventListener("change", function (this: HTMLInputElement) {
        const showAnnual = this.checked;
        updateAllPricingDisplays(showAnnual);

        toggles.forEach((t) => {
          if (t !== toggle) {
            t.checked = showAnnual;
          }
        });
      });
    });

    function updateAllPricingDisplays(showAnnual: boolean) {
      const monthlyPrices =
        document.querySelectorAll<HTMLElement>(".monthly-price");
      const annualPrices =
        document.querySelectorAll<HTMLElement>(".annual-price");
      const monthlyTexts =
        document.querySelectorAll<HTMLElement>(".monthly-text");
      const annualTexts =
        document.querySelectorAll<HTMLElement>(".annual-text");

      if (showAnnual) {
        // Show annual prices
        monthlyPrices.forEach((el) => (el.style.display = "none"));
        annualPrices.forEach((el) => (el.style.display = "block"));
        monthlyTexts.forEach((el) => (el.style.display = "none"));
        annualTexts.forEach((el) => (el.style.display = "block"));
      } else {
        // Show monthly prices
        monthlyPrices.forEach((el) => (el.style.display = "block"));
        annualPrices.forEach((el) => (el.style.display = "none"));
        monthlyTexts.forEach((el) => (el.style.display = "block"));
        annualTexts.forEach((el) => (el.style.display = "none"));
      }
    }
  });
</script>
